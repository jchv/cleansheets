// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenNone-0]
	_ = x[TokenIdentifier-1]
	_ = x[TokenPrivateIdentifier-2]
	_ = x[TokenKeywordAs-3]
	_ = x[TokenKeywordAsync-4]
	_ = x[TokenKeywordAwait-5]
	_ = x[TokenKeywordBreak-6]
	_ = x[TokenKeywordCase-7]
	_ = x[TokenKeywordCatch-8]
	_ = x[TokenKeywordClass-9]
	_ = x[TokenKeywordConst-10]
	_ = x[TokenKeywordContinue-11]
	_ = x[TokenKeywordDebugger-12]
	_ = x[TokenKeywordDefault-13]
	_ = x[TokenKeywordDelete-14]
	_ = x[TokenKeywordDo-15]
	_ = x[TokenKeywordElse-16]
	_ = x[TokenKeywordEnum-17]
	_ = x[TokenKeywordExport-18]
	_ = x[TokenKeywordExtends-19]
	_ = x[TokenKeywordFalse-20]
	_ = x[TokenKeywordFinally-21]
	_ = x[TokenKeywordFor-22]
	_ = x[TokenKeywordFrom-23]
	_ = x[TokenKeywordFunction-24]
	_ = x[TokenKeywordGet-25]
	_ = x[TokenKeywordIf-26]
	_ = x[TokenKeywordImplements-27]
	_ = x[TokenKeywordImport-28]
	_ = x[TokenKeywordIn-29]
	_ = x[TokenKeywordInstanceOf-30]
	_ = x[TokenKeywordInterface-31]
	_ = x[TokenKeywordLet-32]
	_ = x[TokenKeywordNew-33]
	_ = x[TokenKeywordNull-34]
	_ = x[TokenKeywordMeta-35]
	_ = x[TokenKeywordOf-36]
	_ = x[TokenKeywordPackage-37]
	_ = x[TokenKeywordPrivate-38]
	_ = x[TokenKeywordProtected-39]
	_ = x[TokenKeywordPublic-40]
	_ = x[TokenKeywordReturn-41]
	_ = x[TokenKeywordSet-42]
	_ = x[TokenKeywordStatic-43]
	_ = x[TokenKeywordSuper-44]
	_ = x[TokenKeywordSwitch-45]
	_ = x[TokenKeywordTarget-46]
	_ = x[TokenKeywordThis-47]
	_ = x[TokenKeywordThrow-48]
	_ = x[TokenKeywordTrue-49]
	_ = x[TokenKeywordTry-50]
	_ = x[TokenKeywordTypeOf-51]
	_ = x[TokenKeywordVar-52]
	_ = x[TokenKeywordVoid-53]
	_ = x[TokenKeywordWhile-54]
	_ = x[TokenKeywordWith-55]
	_ = x[TokenKeywordYield-56]
	_ = x[TokenPunctuatorOptionalChain-57]
	_ = x[TokenPunctuatorOpenBrace-58]
	_ = x[TokenPunctuatorOpenParen-59]
	_ = x[TokenPunctuatorOpenBracket-60]
	_ = x[TokenPunctuatorCloseBracket-61]
	_ = x[TokenPunctuatorCloseParen-62]
	_ = x[TokenPunctuatorCloseBrace-63]
	_ = x[TokenPunctuatorDot-64]
	_ = x[TokenPunctuatorEllipsis-65]
	_ = x[TokenPunctuatorSemicolon-66]
	_ = x[TokenPunctuatorComma-67]
	_ = x[TokenPunctuatorLessThan-68]
	_ = x[TokenPunctuatorGreaterThan-69]
	_ = x[TokenPunctuatorLessThanEqual-70]
	_ = x[TokenPunctuatorGreaterThanEqual-71]
	_ = x[TokenPunctuatorEqual-72]
	_ = x[TokenPunctuatorNotEqual-73]
	_ = x[TokenPunctuatorStrictEqual-74]
	_ = x[TokenPunctuatorStrictNotEqual-75]
	_ = x[TokenPunctuatorPlus-76]
	_ = x[TokenPunctuatorMinus-77]
	_ = x[TokenPunctuatorMult-78]
	_ = x[TokenPunctuatorDiv-79]
	_ = x[TokenPunctuatorMod-80]
	_ = x[TokenPunctuatorExponent-81]
	_ = x[TokenPunctuatorIncrement-82]
	_ = x[TokenPunctuatorDecrement-83]
	_ = x[TokenPunctuatorLShift-84]
	_ = x[TokenPunctuatorRShift-85]
	_ = x[TokenPunctuatorUnsignedRShift-86]
	_ = x[TokenPunctuatorBitAnd-87]
	_ = x[TokenPunctuatorBitOr-88]
	_ = x[TokenPunctuatorBitXor-89]
	_ = x[TokenPunctuatorNot-90]
	_ = x[TokenPunctuatorBitNot-91]
	_ = x[TokenPunctuatorLogicalAnd-92]
	_ = x[TokenPunctuatorLogicalOr-93]
	_ = x[TokenPunctuatorNullCoalesce-94]
	_ = x[TokenPunctuatorQuestionMark-95]
	_ = x[TokenPunctuatorColon-96]
	_ = x[TokenPunctuatorAssign-97]
	_ = x[TokenPunctuatorPlusAssign-98]
	_ = x[TokenPunctuatorMinusAssign-99]
	_ = x[TokenPunctuatorMultAssign-100]
	_ = x[TokenPunctuatorDivAssign-101]
	_ = x[TokenPunctuatorModAssign-102]
	_ = x[TokenPunctuatorExponentAssign-103]
	_ = x[TokenPunctuatorLShiftAssign-104]
	_ = x[TokenPunctuatorRShiftAssign-105]
	_ = x[TokenPunctuatorUnsignedRShiftAssign-106]
	_ = x[TokenPunctuatorBitAndAssign-107]
	_ = x[TokenPunctuatorBitOrAssign-108]
	_ = x[TokenPunctuatorBitXorAssign-109]
	_ = x[TokenPunctuatorLogicalAndAssign-110]
	_ = x[TokenPunctuatorLogicalOrAssign-111]
	_ = x[TokenPunctuatorNullCoalesceAssign-112]
	_ = x[TokenPunctuatorFatArrow-113]
	_ = x[TokenLiteralNumber-114]
	_ = x[TokenLiteralString-115]
	_ = x[TokenLiteralRegExp-116]
	_ = x[TokenLiteralTemplate-117]
}

const _TokenType_name = "TokenNoneTokenIdentifierTokenPrivateIdentifierTokenKeywordAsTokenKeywordAsyncTokenKeywordAwaitTokenKeywordBreakTokenKeywordCaseTokenKeywordCatchTokenKeywordClassTokenKeywordConstTokenKeywordContinueTokenKeywordDebuggerTokenKeywordDefaultTokenKeywordDeleteTokenKeywordDoTokenKeywordElseTokenKeywordEnumTokenKeywordExportTokenKeywordExtendsTokenKeywordFalseTokenKeywordFinallyTokenKeywordForTokenKeywordFromTokenKeywordFunctionTokenKeywordGetTokenKeywordIfTokenKeywordImplementsTokenKeywordImportTokenKeywordInTokenKeywordInstanceOfTokenKeywordInterfaceTokenKeywordLetTokenKeywordNewTokenKeywordNullTokenKeywordMetaTokenKeywordOfTokenKeywordPackageTokenKeywordPrivateTokenKeywordProtectedTokenKeywordPublicTokenKeywordReturnTokenKeywordSetTokenKeywordStaticTokenKeywordSuperTokenKeywordSwitchTokenKeywordTargetTokenKeywordThisTokenKeywordThrowTokenKeywordTrueTokenKeywordTryTokenKeywordTypeOfTokenKeywordVarTokenKeywordVoidTokenKeywordWhileTokenKeywordWithTokenKeywordYieldTokenPunctuatorOptionalChainTokenPunctuatorOpenBraceTokenPunctuatorOpenParenTokenPunctuatorOpenBracketTokenPunctuatorCloseBracketTokenPunctuatorCloseParenTokenPunctuatorCloseBraceTokenPunctuatorDotTokenPunctuatorEllipsisTokenPunctuatorSemicolonTokenPunctuatorCommaTokenPunctuatorLessThanTokenPunctuatorGreaterThanTokenPunctuatorLessThanEqualTokenPunctuatorGreaterThanEqualTokenPunctuatorEqualTokenPunctuatorNotEqualTokenPunctuatorStrictEqualTokenPunctuatorStrictNotEqualTokenPunctuatorPlusTokenPunctuatorMinusTokenPunctuatorMultTokenPunctuatorDivTokenPunctuatorModTokenPunctuatorExponentTokenPunctuatorIncrementTokenPunctuatorDecrementTokenPunctuatorLShiftTokenPunctuatorRShiftTokenPunctuatorUnsignedRShiftTokenPunctuatorBitAndTokenPunctuatorBitOrTokenPunctuatorBitXorTokenPunctuatorNotTokenPunctuatorBitNotTokenPunctuatorLogicalAndTokenPunctuatorLogicalOrTokenPunctuatorNullCoalesceTokenPunctuatorQuestionMarkTokenPunctuatorColonTokenPunctuatorAssignTokenPunctuatorPlusAssignTokenPunctuatorMinusAssignTokenPunctuatorMultAssignTokenPunctuatorDivAssignTokenPunctuatorModAssignTokenPunctuatorExponentAssignTokenPunctuatorLShiftAssignTokenPunctuatorRShiftAssignTokenPunctuatorUnsignedRShiftAssignTokenPunctuatorBitAndAssignTokenPunctuatorBitOrAssignTokenPunctuatorBitXorAssignTokenPunctuatorLogicalAndAssignTokenPunctuatorLogicalOrAssignTokenPunctuatorNullCoalesceAssignTokenPunctuatorFatArrowTokenLiteralNumberTokenLiteralStringTokenLiteralRegExpTokenLiteralTemplate"

var _TokenType_index = [...]uint16{0, 9, 24, 46, 60, 77, 94, 111, 127, 144, 161, 178, 198, 218, 237, 255, 269, 285, 301, 319, 338, 355, 374, 389, 405, 425, 440, 454, 476, 494, 508, 530, 551, 566, 581, 597, 613, 627, 646, 665, 686, 704, 722, 737, 755, 772, 790, 808, 824, 841, 857, 872, 890, 905, 921, 938, 954, 971, 999, 1023, 1047, 1073, 1100, 1125, 1150, 1168, 1191, 1215, 1235, 1258, 1284, 1312, 1343, 1363, 1386, 1412, 1441, 1460, 1480, 1499, 1517, 1535, 1558, 1582, 1606, 1627, 1648, 1677, 1698, 1718, 1739, 1757, 1778, 1803, 1827, 1854, 1881, 1901, 1922, 1947, 1973, 1998, 2022, 2046, 2075, 2102, 2129, 2164, 2191, 2217, 2244, 2275, 2305, 2338, 2361, 2379, 2397, 2415, 2435}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
